#!/usr/bin/env python
from subprocess import call, Popen, PIPE, STDOUT
import onetimepass as otp
from os.path import expanduser
import json

def clear():
	Popen(["clear"])

def allow():
	clear()
	print 'accepted'
	# run bash/zsh
	Popen(["/bin/bash"], shell=True) # change default script if wished
	# exit with true
	exit(0)

def deny():
	clear()
	print 'denied'
	# exit with error
	exit(1)

try:
	#get users home directory
	home = expanduser("~")
	#get users token config file path
	tokenfile = home + "/.ssh/authorized_tokens"
	#open and read the token file
	f = open(tokenfile, 'r') # file contents needs to be in following format: ["secretkey"]
	rawTokens = f.read()
	f.close()
	#interpret read file
	tokens = json.loads(rawTokens)
	# check validity for each of the secrets they have
	allowed = False
	for secret in tokens:
		if otp.valid_totp(token=raw_input('~>'), secret=secret, token_length=8):
			allowed = True
	if allowed:
		allow()
	#allow if no secrets for user
	elif secretdb[username].len() == 0:
		allow()
	else:
		deny()
except KeyboardInterrupt:
	# prevent user keyboard interrupt reporting debug data.
        clear()
	deny()
except Exception,e:
	allow()

# default deny
deny()
